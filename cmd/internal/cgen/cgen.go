// Use of this source code is governed by a BSD-style license that can be found
// in the LICENSE file.

//go:generate go run gen.go

package cgen

import (
	"bytes"
	"errors"
	"fmt"
	"os/exec"
)

type Generator struct {
	// Extension should be either 'c' or 'h'.
	Extension byte
}

func (g *Generator) WritePreamble(w *bytes.Buffer) error {
	fmt.Fprintf(w, "// Code generated by puffs-gen-%c. DO NOT EDIT.\n\n", g.Extension)
	w.WriteString(preamble)
	if g.Extension == 'h' {
		w.WriteString("\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n")
	}
	return nil
}

func (g *Generator) WritePostamble(w *bytes.Buffer) error {
	if g.Extension == 'h' {
		w.WriteString("\n#ifdef __cplusplus\n}  // extern \"C\"\n#endif\n")
	}
	return nil
}

func (g *Generator) Format(rawSource []byte) ([]byte, error) {
	cmd := exec.Command("clang-format", "-style=Chromium")
	cmd.Stdin = bytes.NewReader(rawSource)
	out, err := cmd.CombinedOutput()
	if _, ok := err.(*exec.ExitError); ok && len(out) > 0 {
		// Go error messages usually don't end in "\n". The caller, who sees
		// the error we return here, usually adds the "\n" themselves.
		if out[len(out)-1] == '\n' {
			out = out[:len(out)-1]
		}
		// The exec.ExitError's Error message doesn't include stderr, so we
		// return that explicitly.
		return nil, errors.New(string(out))
	}
	return out, err
}
